// ファイルの更新後は既存テーブルを削除して
// npx prisma db push
// npx prisma generate
// npx prisma db seed
// DBの確認
// npx prisma studio or  http://127.0.0.1:54323

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  TA
  TEACHER
  ADMIN
}

model User {
  id              String           @id @default(uuid())
  name            String
  profileImageKey String?          @map("profile_image_key")
  role            Role             @default(STUDENT)
  slackId         String?          @map("slack_id") //null許容
  instagramId     String?          @map("instagram_id") //null許容
  threadsId       String?          @map("threads_id")
  githubId        String?          @map("github_id")
  xId             String?          @map("x_id")
  job             String? // 自由につけていい(照合的な感じ、TA(レビュワー)のレビュワーの部分)
  currentChapter  Int?             @map("current_chapter") //STUDENTのみ
  bio             String           @default("") // 自己紹介 biography
  tasks           Task[] // 自分が作成したタスク
  learningLogs    LearningLog[]
  teacherTasks    TeacherTask[]    @relation("TeacherBookmarkedTasks") //講師がブックマークしたタスク
  teacherStudents TeacherStudent[] @relation("TeacherToStudent") //講師側がブックマークした生徒
  studentTeachers TeacherStudent[] @relation("StudentToTeacher") //生徒が講師からブックマークされたことを確認
  assignmentLogs  AssignmentLog[]  @relation("ResponderAssignments") //担当した講師のログ
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("user")
}

model Task {
  id             String             @id @default(uuid())
  title          String
  description    String?
  userId         String             @map("user_id")
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusId       String?            @map("status_id") //statusへの参照
  status         Status?            @relation(fields: [statusId], references: [id], onDelete: Cascade)
  relatedChapter Int?               @map("related_chapter")
  tags           TaskTag[]
  activityTypes  TaskActivityType[]
  assignmentLog  AssignmentLog? //講師人の対応ログ
  learningLogs   LearningLog[]
  teacherTasks   TeacherTask[]      @relation("BookmarkedTasks") //講師人のブックマークしたタスク
  startedAt      DateTime?          @map("started_at")
  endedAt        DateTime?          @map("ended_at")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@map("task")
}

model Status {
  id    String  @id @default(uuid())
  name  String
  order Int     @unique
  icon  String?
  tasks Task[]

  @@map("status")
}

model Tag {
  id       String    @id @default(uuid())
  name     String
  order    Int       @unique
  icon     String?
  taskTags TaskTag[]

  @@map("tag")
}

model ActivityType {
  id                String             @id @default(uuid())
  name              String
  order             Int                @unique
  description       String?
  taskActivityTypes TaskActivityType[]

  @@map("activity_type")
}

model TaskTag {
  id     String @id @default(uuid())
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String @map("tag_id")

  @@map("task_tag")
}

model TaskActivityType {
  id             String       @id @default(uuid())
  task           Task         @relation(fields: [taskId], references: [id])
  taskId         String       @map("task_id")
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String       @map("activity_type_id")

  @@map("task_activity_type")
}

model TeacherStudent {
  id        String   @id @default(uuid())
  teacher   User     @relation("TeacherToStudent", fields: [teacherId], references: [id])
  teacherId String   @map("teacher_id")
  student   User     @relation("StudentToTeacher", fields: [studentId], references: [id])
  studentId String   @map("student_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teacher_student")
}

model TeacherTask {
  id        String   @id @default(uuid())
  teacher   User     @relation("TeacherBookmarkedTasks", fields: [teacherId], references: [id])
  teacherId String   @map("teacher_id")
  task      Task     @relation("BookmarkedTasks", fields: [taskId], references: [id])
  taskId    String   @map("task_id")
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teacher_task")
}

model LearningLog {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  taskId        String?   @map("task_id")
  title         String    @default("")
  description   String    @default("") // 学習内容の詳細
  reflections   String    @default("") // 振り返り・課題や反省・改善点・学び
  spentMinutes  Int       @default(0) @map("spent_minutes")
  startedAt     DateTime? @map("started_at")
  endedAt       DateTime? @map("ended_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("learning_log")
}

model AssignmentLog {
  id          String   @id @default(uuid())
  taskId      String   @unique @map("task_id")
  task        Task     @relation(fields: [taskId], references: [id])
  responderId String   @map("responder_id")
  responder   User     @relation("ResponderAssignments", fields: [responderId], references: [id])
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("assignment_log")
}
